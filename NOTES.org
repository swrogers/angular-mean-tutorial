* Angular and NodeJS - The MEAN Stack Guide 2020 Edition
  Notes that I've taken during the video portion of the course.

* Section 2 - The Angular Frontend
** The folder structure
   app.module.ts defines the building blocks and features of the application.
   main.ts is the entry point and loads up the app.module.t
** Understanding Angular Components
   - Note taken on [2020-01-25 Sat 11:19] \\
     A page is made of components.
     Example: <app-header>, <app-brand>, <app-feature>.
     These could be broken down even more if desired. If an item has its own logic behind it, then it should be a component. These are easily reused.
** Adding First Component
   - Note taken on [2020-01-25 Sat 11:23] \\
     To create a component manually:
       create a 'posts' subfolder in the 'app' folder.
       create a 'post-create' subfolder in 'posts'.
       create a 'post-create.component.ts' file
       create a 'post-create.component.html' file
       The new component needs to include the @Component decorator.
       Before the new component can be used, it must be included in the app.module.ts as well.
** Event binding
   - To listen to events, use event binding in the template. These are denoted by () in the html.
     #+begin_src html
<button (click)="onAddPost()">Submit Post</button>
     #+end_src
** Property binding
   - To set attributes on an object in the template, use property [] binding.
     #+begin_src html
<textarea [value]="newPost"></textarea>
<textarea [value]="'Needs to be a string'"></textarea>
     #+end_src
** String interpolation
   - Use string interpolation to output strings in a template
     #+begin_src html
<p>{{ newPost }}</p>
<h1>{{ headerText }}</p>
     #+end_src
** Element references
   - You can use an element reference to address the template object from within the component.
     For example, from within the html template:
     #+begin_src html
<textarea [value]="newPost" #postInputReference></textarea>
<button (click)="onAddPost(postInputReference)">Save Post</button>
     #+end_src
     The '#' indicates the name that you are saving the reference to.
     The element can also be accessed from the component's typescript code as well:
     #+begin_src typescript
       onAddPost(postInput: HTMLTextAreaElement) {
           console.log(postInput.value);
       }
     #+end_src
** Two way data binding with ngModel
   - This can be used as a shortcut to the above example, to automatically set an attribute value to a template item.
     You need to import FormsModule from @angular/forms in the app.module to use it.
     #+begin_src html
<textarea [(ngModel)]="enteredValue"></textarea>
<button (click)="onAddPost()"></button>
     #+end_src
     The ngModel needs to be bound to an attribute on the component, like so:
     #+begin_src typescript
             export class TheComponent() {
          enteredValue = '';

          onAddPost() {
              console.log(this.enteredValue);
          }
             }
     #+end_src
